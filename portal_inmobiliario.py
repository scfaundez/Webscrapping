# -*- coding: utf-8 -*-
"""portal_inmobiliario.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYXG5PV8-kAfO97O4dNA2-_Fl5WBBG6c
"""

#Instalar/importal librerías
!pip install xlsxwriter
!pip install selenium
!apt-get update # to update ubuntu to correctly run apt install
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

from numpy.core.fromnumeric import amin
import requests
from bs4 import BeautifulSoup
from datetime import date
import re 
import numpy as np 
import pandas as pd 
from IPython.display import clear_output
from time import sleep

def webscraping_deptos(region,pages,type,scope):  

    urls = []
    titles = []
    address = []
    location = []
    prices = []
    total_m2 = []
    util_m2 = []
    rooms = []
    toilets = []
    publication_date = []
    parking = []
    common_spends = []
    olds = []
    garage = []
    orientation = []
    floors_numbers = []
    apartment_floor_number = []
    apartments_per_floor = []

    print("Web Scraping Portal Inmobiliario")

    print(f"Buscando {type} para {scope}....")
    
    #Iterar por pagina para encontrar las urls de cada oferta de depto y almacenar los resultados en una lista llamada urls
    for i in range(1,pages*50,50):
        main_url = 'https://www.portalinmobiliario.com/'+scope.lower().replace(" ","-")+'/'+type+'/'+region+'/_Desde_'+ str(i)
        main_response = requests.get(main_url)
        main_soup = BeautifulSoup(main_response.text,'html.parser')
        containers = main_soup.find_all('li',{'class':'ui-search-layout__item'})
       
        for container in containers: 
            urls.append(container.find('a',class_='ui-search-result__content ui-search-link')['href'])
        
    counter = 0
    for url in urls:
        response = requests.get(url,allow_redirects=False)
        sleep(0.05)
        soup = BeautifulSoup(response.text,'html.parser')
        counter +=1
        
        #Guardar informacion del titulo y direccion del proyecto

        try:
            titles.append(soup.find('h1',class_='item-title__primary').text.strip())
        except (AttributeError,IndexError):
            titles.append(np.nan)
    
        try: 
            address.append(soup.find('h2',class_='map-address').text)
        except (AttributeError,IndexError):
            address.append(np.nan)

        try: 
            location.append(soup.find('h3',class_='map-location').text)
        except (AttributeError,IndexError):
            location.append(np.nan)


        #Guardar informacion de precios 
        try:
            price = soup.find_all('span',class_='price-tag-fraction')
            if len(price) > 1:
                prices.append(price[1].text)

            else:
                prices.append(price[0].text)
        except (AttributeError,IndexError):
            prices.append(np.nan)

        #Guardar informacion fecha publicacion oferta de arriendo
        try: 
            dates = soup.find_all('p',class_='info')
            if len(dates) == 1:
                publication_date.append(dates[0].text)
            if len(dates) == 2:
                publication_date.append(dates[1].text)
            if len(dates) == 3:
                publication_date.append(dates[2].text)
        except (AttributeError,IndexError):
            publication_date.append(np.nan)
            
        try:
            attribute = soup.find('ul',{'class':'specs-list'}).find_all('li')
            
            for a in attribute:
                heading = a.strong.text
                values = a.span.text

                
                if heading == 'Dormitorios':
                    rooms.append(values)
                
                if heading == 'Baños':
                    toilets.append(values)
            
                if heading == 'Superficie total':
                    total_m2.append(values)
                
                if heading == 'Superficie útil':
                    util_m2.append(values)

                if heading =='Estacionamientos':
                    parking.append(values)

                if heading == 'Gastos comunes':
                    common_spends.append(values)

                if heading == 'Bodegas':
                    garage.append(values)
                
                if heading == 'Antigüedad':
                    olds.append(values)
                
                if heading == 'Orientación':
                    orientation.append(values)
                
                if heading == 'Número de piso de la unidad':
                    apartment_floor_number.append(values)
                
                if heading == 'Departamentos por piso':
                    apartments_per_floor.append(values)
                
                if heading == 'Cantidad de pisos':
                    floors_numbers.append(values)
        except (AttributeError,IndexError):

            rooms.append(np.nan)
            toilets.append(np.nan)
            total_m2.append(np.nan)
            util_m2.append(np.nan)
            parking.append(np.nan)
            garage.append(np.nan)
            olds.append(np.nan)
            common_spends.append(np.nan)
            orientation.append(np.nan)
            apartment_floor_number.append(np.nan)
            apartments_per_floor.append(np.nan)
            floors_numbers.append(np.nan)


        
        #Clausula para mantener cantidad de variables por cada oferta de departamento, en caso de no existir esa variable se llena con nan
        if len(titles) != counter:
            titles.append(np.nan)
        if len(address) != counter:
            address.append(np.nan)
        if len(location) != counter:
            location.append(np.nan)
        if len(publication_date) != counter:
            publication_date.append(np.nan)
        if len(prices) != counter:
            prices.append(np.nan)

        if len(rooms) != counter:
            try:
                rooms.append(soup.find('dd',{'class':'align-room'}).text)
            except (AttributeError,IndexError):
                rooms.append(np.nan)
        
        if len(toilets) != counter:
            try:
                toilets.append(soup.find('dd',{'class':'align-bathroom'}).text)
            except (AttributeError,IndexError):
                toilets.append(np.nan)
       

        if len(util_m2) != counter:
            try:
                util_m2.append(soup.find('dd',{'class':'align-surface'}).text)
            except (AttributeError,IndexError):
                util_m2.append(np.nan)
      
        if len(total_m2) != counter:
            total_m2.append(np.nan)
        if len(parking) != counter:
            parking.append(np.nan)
        if len(garage) != counter:
            garage.append(np.nan)
        if len(olds) != counter:
            olds.append(np.nan)
        if len(common_spends) != counter:
            common_spends.append(np.nan)
        if len(orientation) != counter:
            orientation.append(np.nan)
        if len(apartment_floor_number) != counter:
            apartment_floor_number.append(np.nan)
        if len(apartments_per_floor) != counter:
            apartments_per_floor.append(np.nan)
        if len(floors_numbers) != counter:
            floors_numbers.append(np.nan)
      
        
        print(f"Departamentos en {scope} encontrados: {len(titles)}")
        clear_output(wait=True)

    print(f"Total informacion extraida de departamentos en {scope}: {len(titles)}")
    print('Web Scraping Completado!\n')

    

    df = pd.DataFrame({'fecha descarga':date.today(),'fecha publicacion':publication_date,'titulo':titles,'direccion':address,
                    'location':location, 'orientacion':orientation,'antiguedad':olds,'m2 totales':total_m2,'m2_utiles':util_m2,'habitaciones':rooms,
                    'banos':toilets,'estacionamiento':parking,'bodega':garage,'piso de apartamento':apartment_floor_number,
                    'cantidad de pisos edificio':floors_numbers,'apartamentos por piso':apartments_per_floor,'gastos comunes': common_spends,
                    'precio':prices,'url':urls})


    return df

appended_data = []

region1 = ["antofagasta", "la-araucania", "de-los-rios", "tarapaca", "maule", "biobio", "coquimbo","los-lagos",
          "bernardo-ohiggins", "nuble", "atacama", "arica-y-parinacota", "magallanes-y-antartica-chilena", "aysen", 
          "buin-metropolitana",
          "calera-de-tango-metropolitana",
          "cerrillos-metropolitana",
          "cerro-navia-metropolitana",
          "colina-metropolitana",
          "conchali-metropolitana",
          "el-bosque-metropolitana",
          "estacion-central-metropolitana",
          "huechuraba-metropolitana",
          "independencia-metropolitana",
          "la-cisterna-metropolitana",
          "la-florida-metropolitana",
          "la-granja-metropolitana",
          "la-pintana-metropolitana",
          "la-reina-metropolitana",
          "lampa-metropolitana",
          "las condes-metropolitana",
          "lo barnechea-metropolitana",
          "lo-espejo-metropolitana",
          "lo-prado-metropolitana",
          "macul-metropolitana",
          "maipu-metropolitana",
          "melipilla-metropolitana",
          "padre-hurtado-metropolitana",
          "paine-metropolitana",
          "pedro-aguirre-cerda-metropolitana",
          "penaflor-metropolitana",
          "penalolen-metropolitana",
          "providencia-metropolitana",
          "pudahuel-metropolitana",
          "puente-alto-metropolitana",
          "quilicura-metropolitana",
          "quinta-normal-metropolitana",
          "recoleta-metropolitana",
          "renca-metropolitana",
          "san-bernardo-metropolitana",
          "san-joaquin-metropolitana",
          "san-miguel-metropolitana",
          "san-pedro-metropolitana",
          "san-ramon-metropolitana",
          "santiago-metropolitana",
          "talagante-metropolitana",
          "algarrobo-valparaiso",
          "calera-valparaiso",
          "casablanca-valparaiso",
          "concon-valparaiso",
          "el-quisco-valparaiso",
          "el-tabo-valparaiso",
          "la-ligua-valparaiso",
          "limache-valparaiso",
          "los-andes-valparaiso",
          "papudo-valparaiso",
          "puchuncavi-valparaiso",
          "quillota-valparaiso",
          "quilpue-valparaiso",
          "quintero-valparaiso",
          "san-antonio-valparaiso",
          "san-esteban-valparaiso",
          "san-felipe-valparaiso",
          "santo-domingo-valparaiso",
          "valparaiso-valparaiso",
          "villa-alemana-valparaiso",
          "vina-del-mar-valparaiso",
          "zapallar-valparaiso",
          "alto-las-condes-santiago-metropolitana",
          "barrio-el-golf-las-condes-santiago-metropolitana",
          "centrofinanciero-las-condes-santiago-metropolitana",
          "rm-metropolitana/las-condes/colon-oriente---vital-apoquindo",
          "rm-metropolitana/las-condes/el-remanso",
          "estoril-las-condes-santiago-metropolitana",
          "los-dominicos-las-condes-santiago-metropolitana",
          "mall-sport-las-condes-santiago-metropolitana",
          "metro-escuela-militar-las-condes-santiago-metropolitana",
          "rm-metropolitana/las-condes/metro-hernando-de-magallanes",
          "metro-manquehue-apumanque-las-condes-santiago-metropolitana",
          "nueva-las-condes-santiago-metropolitana",
          "parque-arauco-las-condes-santiago-metropolitana",
          "rm-metropolitana/las-condes/parque-padre-alberto-hurtado",
          "quinchamali-las-condes-santiago-metropolitana",
          "rotonda-atenas-las-condes-santiago-metropolitana",
          "san-carlos-de-apoquindo-las-condes-santiago-metropolitana",
          "san-damian-las-condes-santiago-metropolitana",
          "rm-metropolitana/las-condes/sebastian-elcano",
          "vaticano-las-condes-santiago-metropolitana",
          "barrio-italia-providencia-santiago-metropolitana",
          "bellavista-providencia-santiago-metropolitana",
          "campus-oriente-providencia-santiago-metropolitana",
          "ines-de-suarez-providencia-santiago-metropolitana",
          "las-lilas-providencia-santiago-metropolitana",
          "los-leones-providencia-santiago-metropolitana",
          "manuel-montt-providencia-santiago-metropolitana",
          "metro-bilbao-providencia-santiago-metropolitana",
          "metro-tobalaba-mall-costanera-providencia-santiago-metropolitana",
          "pedro de valdivia-providencia-santiago-metropolitana",
          "pedro de valdivia norte-providencia-santiago-metropolitana",
          "plaza italia-providencia-santiago-metropolitana",
          "salvador-providencia-santiago-metropolitana",
          "borde-rio-casa-piedra-vitacura-santiago-metropolitana",
          "rm-metropolitana/vitacura/estadio-croata",
          "estadio-manquehue-vitacura-santiago-metropolitana",
          "jardin-del-este-vitacura-santiago-metropolitana",
          "juan-xxiii-vitacura-santiago-metropolitana",
          "la-llaveria-vitacura-santiago-metropolitana",
          "lo-curro-vitacura-santiago-metropolitana",
          "rm-metropolitana/vitacura/nuestra-senora-del-rosario",
          "parque-bicentenario-vitacura-santiago-metropolitana",
          "pio-xi-vitacura-santiago-metropolitana",
          "santa-maria-de-manquehue-vitacura-santiago-metropolitana",
          "tabancura-vitacura-santiago-metropolitana",
          "rm-metropolitana/vitacura/villa-el-dorado",
          "barrio-brasil-santiago-santiago-metropolitana",
          "rm-metropolitana/santiago/barrio-diez-de-julio",
          "barrio-lastarria-santiago-santiago-metropolitana",
          "barrio-republica-santiago-santiago-metropolitana",
          "rm-metropolitana/santiago/barrio-san-borja",
          "barrio-yungay-santiago-santiago-metropolitana",
          "bogota-sierra-bella-santiago-santiago-metropolitana",
          "bulnes-santiago-santiago-metropolitana",
          "centro-historico-de-santiago-santiago-santiago-metropolitana",
          "club-hipico-santiago-santiago-metropolitana",
          "rm-metropolitana/santiago/dieciocho",
          "rm-metropolitana/santiago/ejercito---toesca",
          "franklin-biobio-santiago-santiago-metropolitana",
          "rm-metropolitana/santiago/meiggs"
          "rm-metropolitana/santiago/parque-almagro",
          "rm-metropolitana/santiago/parque-los-reyes",
          "parque-ohiggins-santiago-santiago-metropolitana",
          "rm-metropolitana/santiago/san-diego",
          "santa-isabel-santiago-santiago-metropolitana",
          "amapolas-nunoa-santiago-metropolitana",
          "rm-metropolitana/nunoa/diagonal-oriente",
          "rm-metropolitana/nunoa/diego-de-almagro",
          "estadio-nacional-nunoa-santiago-metropolitana",
          "juan-gomez-millas-nunoa-santiago-metropolitana",
          "metro-irarrázaval-nunoa-santiago-metropolitana",
          "rm-metropolitana/nunoa/metro-monsenor-eyzaguirre",
          "rm-metropolitana/nunoa/metro-simon-bolivar",
          "rm-metropolitana/nunoa/metro-nunoa",
          "rm-metropolitana/nunoa/parque-botanico",
          "parque-juan-xxiii-nunoa-santiago-metropolitana",
          "parque-san-eugenio-metro ñuble-nunoa-santiago-metropolitana",
          "rm-metropolitana/nunoa/plaza-egana",
          "plaza-nunoa-nunoa-santiago-metropolitana",
          "rm-metropolitana/nunoa/villa-frei",
          "rm-metropolitana/nunoa/villa-los-jardines---villa-los-presidentes"
          "rm-metropolitana/lo-barnechea/antigua-lo-barnechea",
          "rm-metropolitana/lo-barnechea/camino-a-farellones",
          "centros-invernales-lo-barnechea-santiago-metropolitana",
          "rm-metropolitana/lo-barnechea/cerro-dieciocho",
          "el-arrayan-lo-barnechea-santiago-metropolitana",
          "el-huinganal-lo-barnechea-santiago-metropolitana",
          "la-dehesa-lo-barnechea-santiago-metropolitana",
          "los-trapenses-lo-barnechea-santiago-metropolitana",
          "rm-metropolitana/lo-barnechea/plaza-san-enrique",
          "rm-metropolitana/lo-barnechea/puente-nuevo",
          "valle-escondido-lo-barnechea-santiago-metropolitana",
          "valparaiso/vina-del-mar/achupallas",
          "agua santa-vina-del-mar-valparaiso-valparaiso",
          "centro-de-vina-del-mar-vina-del-mar-valparaiso-valparaiso",
          "valparaiso/vina-del-mar/chorrillos",
          "forestal-vina-del-mar-valparaiso-valparaiso",
          "valparaiso/vina-del-mar/glorias-navales",
          "valparaiso/vina-del-mar/gomez-carreno",
          "valparaiso/vina-del-mar/las-salinas",
          "libertad-vina-del-mar-valparaiso-valparaiso",
          "valparaiso/vina-del-mar/miraflores",
          "quinta-vergara-vina-del-mar-valparaiso-valparaiso",
          "recreo-vina-del-mar-valparaiso-valparaiso",
          "renaca-vina-del-mar-valparaiso-valparaiso",
          "valparaiso/vina-del-mar/renaca-alto",
          "valparaiso/vina-del-mar/santa-ines",
          "valparaiso/vina-del-mar/santa-julia"]

tipo1=['departamento', 'casa']
transaccion1=['venta', 'arriendo']

for i in region1:
    for j in tipo1:
        for w in transaccion1:
            df=webscraping_deptos(i,1,j,w)
            df['regiones'] = i
            df['tipo'] = j
            df['transaccion'] = w
            appended_data.append(df)

appended_data = pd.concat(appended_data, ignore_index=True)

z='propiedades'
appended_data.to_excel("%s.xlsx" % z)

#Post data extraction
df=appended_data

#limpiar variables numeros de string
df['precio'] = df['precio'].str.replace('.','')
df['gastos comunes'] = df['gastos comunes'].str.replace('CLP','')
df['gastos comunes'] = df['gastos comunes'].str.replace('UF','')
df['banos'] = df['banos'].str.replace('Baños','')
df['banos'] = df['banos'].str.replace('Baño','')
df['banos'] = df['banos'].str.replace('baño','')
df['banos'] = df['banos'].str.replace('baños','')
df['habitaciones'] = df['habitaciones'].str.replace('Dormitorios','')
df['habitaciones'] = df['habitaciones'].str.replace('Dormitorio','')
df['habitaciones'] = df['habitaciones'].str.replace('dormitorios','')
df['habitaciones'] = df['habitaciones'].str.replace('dormitorio','')
df['m2_utiles'] = df['m2_utiles'].str.replace('m² útiles','')
df['m2_utiles'] = df['m2_utiles'].str.replace('m²','')
df['m2_utiles'] = df['m2_utiles'].str.replace('m² totales','')
df['m2 totales'] = df['m2 totales'].str.replace('m²','')
df['antiguedad'] = df['antiguedad'].str.replace('años','')

#Creando variable sector, comuna y region
df = df.join(df['location'].str.split(',', expand=True).add_prefix('loc'))
df = df.rename(columns = {'loc0': 'sector', 'loc1': 'comuna', 'loc2': 'region'}, inplace = False)
df = df.drop(['location', 'region','url'], axis=1)

#Arreglar las varaibles con rangos string: superficie util
df = df.join(df['m2_utiles'].str.split('-', expand=True).add_prefix('loc'))
df['loc0'] = df['loc0'].astype(float, errors='ignore')
df['loc1'] = df['loc1'].astype(float, errors='ignore')
ave_data = df[['loc0', 'loc1']].copy()
df['super_util'] = ave_data.mean(numeric_only=True, axis=1)
df = df.drop(['m2_utiles', 'loc0', 'loc1'], axis=1)

#Arreglar las varaibles con rangos string: habitaciones
df = df.join(df['habitaciones'].str.split('-', expand=True).add_prefix('loc'))
df['loc0'] = df['loc0'].astype(float, errors='ignore')
df['loc1'] = df['loc1'].astype(float, errors='ignore')
ave_data1 = df[['loc0', 'loc1']].copy()
df['dormitorios'] = ave_data1.mean(numeric_only=True, axis=1)
df = df.drop(['habitaciones', 'loc0', 'loc1'], axis=1)

#Arreglar las varaibles con rangos string: baños
df = df.join(df['banos'].str.split('-', expand=True).add_prefix('loc'))
df['loc0'] = df['loc0'].astype(float, errors='ignore')
df['loc1'] = df['loc1'].astype(float, errors='ignore')
ave_data2 = df[['loc0', 'loc1']].copy()
df['restrooms'] = ave_data2.mean(numeric_only=True, axis=1)
df = df.drop(['banos', 'loc0', 'loc1', 'loc3'], axis=1)

#Fill in empty comuna cells with sector.
df.comuna.fillna(df.sector, inplace=True)

#convertir a floats or int
df['antiguedad'] = df['antiguedad'].astype(float)
df['m2 totales'] = df['m2 totales'].astype(float, errors='raise')
df['estacionamiento'] = df['estacionamiento'].astype(float)
df['bodega'] = df['bodega'].astype(float)
df['piso de apartamento'] = df['piso de apartamento'].astype(float)
df['cantidad de pisos edificio'] = df['cantidad de pisos edificio'].astype(float)
df['apartamentos por piso'] = df['apartamentos por piso'].astype(float)
df['gastos comunes'] = df['gastos comunes'].astype(float)
df['precio'] = df['precio'].astype(float)

#Indentificar proyectos
df['nuevo_proyecto'] = df['titulo'].str.contains('Proyecto', regex=True).astype(float)

z='propiedades_final'
df.to_excel("%s.xlsx" % z)